{"version":3,"sources":["pages/albums/Albums.module.css","pages/tracks/Tracks.module.css","components/Header/Header.tsx","pages/albums/Albums.tsx","pages/tracks/Tracks.tsx","pages/App.tsx","serviceWorker.ts","index.tsx","components/Header/Header.module.css"],"names":["module","exports","Header","className","styles","root","menu","menuItem","menuLink","to","Albums","Tracks","App","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,KAAO,uB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,uB,2KCIZC,EAAS,WAClB,OACI,4BAAQC,UAAWC,IAAOC,MACtB,6BACI,wBAAIF,UAAWC,IAAOE,MAClB,wBAAIH,UAAWC,IAAOG,UAClB,kBAAC,IAAD,CAAMJ,UAAWC,IAAOI,SAAUC,GAAG,KAArC,SAIJ,wBAAIN,UAAWC,IAAOG,UAClB,kBAAC,IAAD,CAAMJ,UAAWC,IAAOI,SAAUC,GAAG,WAArC,WAIJ,wBAAIN,UAAWC,IAAOG,UAClB,kBAAC,IAAD,CAAMJ,UAAWC,IAAOI,SAAUC,GAAG,WAArC,e,iBCjBXC,EAAS,WAClB,OAAO,yBAAKP,UAAWC,IAAOC,MAAvB,W,iBCDEM,EAAS,WAClB,OAAO,yBAAKR,UAAWC,IAAOC,MAAvB,YCCEO,EAAM,WACf,OACI,yBAAKT,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOU,KAAK,WACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,WACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,KAAZ,YCNdC,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DA4CZ,SAASC,EAAgBC,EAAeC,GACpCC,UAAUC,cACLC,SAASJ,GACTK,MAAK,SAAAC,GACFA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WAEd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBG,QACbT,UAAUC,cAAcS,YAIxBC,QAAQC,IACJ,iHAKAb,GAAUA,EAAOc,UACjBd,EAAOc,SAAST,KAMpBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACjBf,EAAOe,UAAUV,WAOxCW,OAAM,SAAAC,GACHL,QAAQK,MAAM,4CAA6CA,MCjGvEC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDiBrB,SAAkBtB,GACrB,GAA6C,kBAAmBC,UAAW,CAIvE,GAFkB,IAAIsB,IAAIC,YAAwB9B,OAAOC,SAAS8B,MAEpDC,SAAWhC,OAAOC,SAAS+B,OAIrC,OAGJhC,OAAOiC,iBAAiB,QAAQ,WAC5B,IAAM5B,EAAK,UAAMyB,YAAN,sBAEPhC,IAiEhB,SAAiCO,EAAeC,GAE5C4B,MAAM7B,EAAO,CACT8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAA0B,GAEF,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAGjB,MAApBF,EAASG,QACO,MAAfF,IAC0C,IAAvCA,EAAYG,QAAQ,cAGxBjC,UAAUC,cAAciC,MAAM/B,MAAK,SAAAC,GAC/BA,EAAa+B,aAAahC,MAAK,WAC3BV,OAAOC,SAAS0C,eAKxBvC,EAAgBC,EAAOC,MAG9BgB,OAAM,WACHJ,QAAQC,IACJ,oEA1FAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WAC/BQ,QAAQC,IACJ,iHAMRf,EAAgBC,EAAOC,OCxCvCE,I,kBCfAxB,EAAOC,QAAU,CAAC,KAAO,qBAAqB,KAAO,qBAAqB,SAAW,yBAAyB,SAAW,4B","file":"static/js/main.1349be27.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Albums_root__1hVER\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Tracks_root__39DAU\"};","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport styles from './Header.module.css';\n\nexport const Header = () => {\n    return (\n        <header className={styles.root}>\n            <nav>\n                <ul className={styles.menu}>\n                    <li className={styles.menuItem}>\n                        <Link className={styles.menuLink} to=\"/\">\n                            Home\n                        </Link>\n                    </li>\n                    <li className={styles.menuItem}>\n                        <Link className={styles.menuLink} to=\"/albums\">\n                            Albums\n                        </Link>\n                    </li>\n                    <li className={styles.menuItem}>\n                        <Link className={styles.menuLink} to=\"/tracks\">\n                            Tracks\n                        </Link>\n                    </li>\n                </ul>\n            </nav>\n        </header>\n    );\n};\n","import React from 'react';\n\nimport styles from './Albums.module.css';\n\nexport const Albums = () => {\n    return <div className={styles.root}>Albums</div>;\n};\n","import React from 'react';\n\nimport styles from './Tracks.module.css';\n\nexport const Tracks = () => {\n    return <div className={styles.root}> Tracks</div>;\n};\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { Header } from 'components/Header/Header';\nimport { Albums } from 'pages/albums';\nimport { Tracks } from 'pages/tracks';\n\nexport const App = () => {\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <Header />\n                <Switch>\n                    <Route path=\"/albums\">\n                        <Albums />\n                    </Route>\n                    <Route path=\"/tracks\">\n                        <Tracks />\n                    </Route>\n                    <Route path=\"/\">Home</Route>\n                </Switch>\n            </BrowserRouter>\n        </div>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Header_root__2R_Rn\",\"menu\":\"Header_menu__BQHSW\",\"menuItem\":\"Header_menuItem__39v8B\",\"menuLink\":\"Header_menuLink__ig-eX\"};"],"sourceRoot":""}